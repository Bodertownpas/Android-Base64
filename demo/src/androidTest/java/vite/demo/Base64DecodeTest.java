package vite.demo;

import android.support.test.filters.SmallTest;
import android.support.test.runner.AndroidJUnit4;
import android.util.ArrayMap;
import android.util.Log;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Iterator;
import java.util.Map;
import java.util.Random;

import vite.base64.Base64;

/**
 * Created by trs on 16-11-3.
 */
@SmallTest
@RunWith(AndroidJUnit4.class)
public class Base64DecodeTest {

    private final ArrayMap<String, String> decodeResult = new ArrayMap<>();

    @Before
    public void setUp() {
        decodeResult.put("SGVsbG8gV3JvbGQh", "Hello Wrold!");
        decodeResult.put("YQ==", "a");
        decodeResult.put("YWI=", "ab");
        decodeResult.put("YWJj", "abc");
        decodeResult.put("YWJjZA==", "abcd");
        decodeResult.put("6Iuf5Yip5Zu95a6255Sf5q275Lul77yM5bKC5Zug56W456aP6YG/6LaL5LmL", "苟利国家生死以，岂因祸福避趋之");
        decodeResult.put("44Gv44Gq44GV44GN", "はなさき");
        decodeResult.put("NDUxMzgwNjQy", "451380642");
        decodeResult.put("4piO4piP4pyE4piq4pij4pii4pig4pmowqsgwrvtgZDjgJPjiprjipvlm43jipLjipbimJHinJTimJDimJLinJjjjb/imK" +
                "/imLDimLfimaXimaDimaTinaTimYLimYDimIXimIbimK/inKHigLvljY3ljZA=", "☎☏✄☪☣☢☠♨« »큐〓㊚㊛囍㊒㊖☑✔☐☒✘㍿☯☰☷♥♠♤❤♂♀★☆☯✡※卍卐"
        );
        decodeResult.put
                ("TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0TG9uZ1Rlc3RMb25nVGVzdExvbmdUZXN0",
                        "LongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTestLongTest"
                );
    }

    @After
    public void tearDown() {
        decodeResult.clear();
    }

    @Test
    public void testDecodeData() {
        Iterator iter = decodeResult.entrySet().iterator();
        while (iter.hasNext()) {
            Map.Entry entry = (Map.Entry) iter.next();
            String key = (String) entry.getKey();
            String value = (String) entry.getValue();
            Assert.assertArrayEquals(Base64.decode(key.getBytes()), value.getBytes());
            Assert.assertEquals(new String(Base64.decode(key.getBytes())), value);
            Assert.assertArrayEquals(Base64.decode(key.getBytes()), android.util.Base64.decode(key.getBytes(), 0));
        }
    }

    @Test
    public void testDecodeOffset() {
//        Random random = new Random();
//        byte[] data = new byte[100];
//        for (int i = 0; i < 10; i++) {
//            random.nextBytes(data);
//            Log.v("testDecodeOffset",new String(data));
//            Assert.assertArrayEquals(Base64.decode(data, 20, 40, Base64.NO_WRAP), android.util.Base64.decode(data, 20, 40, 0));
//        }
        byte[] data = "N\nDUxMzgwN\nj\nQy".getBytes();
//        Assert.assertArrayEquals(Base64.decode(data, Base64.NO_WRAP), android.util.Base64.decode(data, 0));
        Log.v("testDec",new String(android.util.Base64.decode(data, 0)));
//        Log.v("testDec",new String(android.util.Base64.decode("YWJjZA", 0)));
//        Log.v("testDec",new String(Base64.decode("YWJjZA".getBytes())));
    }
}
